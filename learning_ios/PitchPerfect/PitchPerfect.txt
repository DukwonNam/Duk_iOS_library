# Intro to iOS App Development with Swift

1. Introduction and Xcode: Swift and Xcode
2. AutoLayout and Buttons: App structure: How to connect UI elements to the code
3: Multiple Views: Adding multiple views
4, 5: How to play back the recorded voice with various alterations


Learn Swift Programming Syntax

# MVC pattern
- Model: data
- View: UI
- Controller: control

MVC pattern은 80년대에 MAC을 개발해던 시기에 탄생
View ---Action--> Controller ---Update--> Model
View <--Update--- Controller <--Notify--- Model

예를들어 똑같은 데이터에 여러개의 View를 가질때 장점을 가진다.
각 계층으로 역할을 나눔으로서 유지보수가 쉬워진다.

# iOS 앱에서의 MVC패턴
- View: UIView, UILabel, UIButton... (UIKit framework)
- Controller: ViewController.swift class

# iOS의 State 변화
1) Not Running
2) Inactive
3) Active
4) Background
5) Suspended: 메모리가 정리된다.
- 아이콘 눌러서 앱 실행(실행중이 아닐때): 1 >> 2 >> 3
- 앱 백그라운드 전이: 3 >> 2 >> 4
- 백그라운드에 있던 앱 재실행: 4 >> 2 >> 3
- 백그라운드에서 몇분 후: 4 >> 5
- Suspended에서 재실행: 5 >> 1 >> 2 >> 3


# UIViewController
1. 핵심역할
- View를 업뎃, 주로 data의 변화에 의해서...
- View의 User Interaction에 대응
- View의 레이아웃 조정
- 다른 객체(다른 ViewController)와의 협업

2. ViewController가 View를 생성하는 방법
- StoryBoard를 이용
- Nib파일을 이용
- loadView()를 호출

3. View의 상태변화에 따른 Notification
0) viewDidLoad: view가 메모리에 올라옴. 추가적인 View의 설정이 있을때 사용
1) viewWillAppear
2) viewDidAppear
3) viewWillDisappear
4) viewDidDisappear
- 사라짐 >> 1 >> 보이는중 >> 2 >> 보임 >> 3 >> 사라지는중 >> 4 >> 사라짐


# 버튼
- 배경색: Instector > View > Background
- 가운데 정렬:
  Align > "Horizontally/Vertically in container" 선택 > "Add Constranints"
  OR
  Control + 버튼 drag > 상위의 View에 연결 > Center horizontally/vertically in container 선택
- 버튼의 Action에 따른 코드:
  1) Action마다 함수를 생성:
     Control + StoryBoard에 있는 버튼을 드래그 > Controller의 코드에 놓기 > Connection:"Action", Name:[함수명] 작성 = 버튼이 눌리면 이 함수가 실행된다.
  2) 
- 버튼을 코드상에서 컨트롤 할 수 있게(IBOutlet으로 연결):
  1) 선 연결, 후 변수명:
     Control + StoryBoard에 있는 버튼을 드래그 > Controller의 코드에 놓기 > Connection:"Outlet", Name:[변수명] 작성 = 이 변수로 라벨을 update 할 수 있다.
  2) 선 변수명, 후 연결:
     Controller에 @IBOutnet 으로 시작하는 변수를 만든다. > Storyboard에서 Control + Controller 를 선택 후 드래그 > IBOutlet과 연결할 Button을 연결시켜 준다.


# 라벨
- 라벨의 Update를 위한 코드:
  Control + StoryBoard에 있는 버튼을 드래그 > Controller의 코드에 놓기 > Connection:"Outlet", Name:[변수명] 작성 = 이 변수로 라벨을 update 할 수 있다.
- 다양한 화면크기에도 라벨이 버튼 밑에 있도록:
  Control + 라벨을 버튼으로 드래그 > "Vertical spacing", "Center horizontally" 선택 > "Add constraints"


# 이미지 Asset에 추가하기
- 기본적으로 x1, x2, x3 이미지가 필요함
- 파일 형식은 [파일명] + (@1x 생략)/@2x/@3x.png 으로 하면 한꺼번에 추가가 가능


# View <-> code
- IBOutlet: code --> IBOutlet --> UI elements
- IBAction: code <-- IBAction <-- UI elements 


# 에뮬레이터 설정
- 회전: Command + Left/Right
- 화면크기조절: Command + 1/2/3/4/...


# Class 등의 Documentation 보기
- Option + 보고싶은 Class 클릭
혹은
- shift + command + 0: Documentation 검색

# Navigation Controller
- 추가: View Controller를 선택해둔 상태에서, Editor > Embed In > Navigation Controller 선택하면 추가완료
- 또 다른 ViewController 추가: Object Library에서 ViewController를 스토리보드로 드래그
- 또 다른 ViewController로 화면 넘어가게 하기:
  segue라고 표현함, control + 넘어가게 할 버튼 드래그해서 넘어가게할 ViewController에 연결 > Action Segue > Show 선택
- B ViewController로 화면 넘어가게 하기 programmatically:
  1) Control + A Controller에서 B Controller 로 드래그 > Manual Segue > show > Storyboard 상에서 A Controller에 속한 segue가 하나 생성됨
  2) 생성된 segue를 선택 > Attribute Inspector > Identifier 에 이름 지어주기
  3) performSegue() 함수 호출하기
- 다음 화면에 전달할 data가 있는 경우:
  1) performSegue에서 sender: 에 전달할 인자를 넣어줌
  2) B Controller에서 받을 변수를 선언
  3) A Controller에서 prepare function을 override
    - segue의 identifier가 호출한 것과 동일한지 확인
  4) B View Controller를 segue.destination을 업캐스팅하여 받아오고
  5) 전달할 인자를 sender를 통해 캐스팅하여 받는다.
  6) 이렇게 받은 인자를 2)에서 선언한 B Controller 변수에 직접 할당해 준다.

# ViewController 새로 만들기(Storyboard에 View는 있지만 Controller가 없는 상태)
- ViewController를 생성:
  Navigator Panel > 프로젝트 폴더 + 오른쪽 클릭 > New File
  > iOS tab > Cocoa Touch class > Next
  > Class: "PlaySoundsViewController", Subclass of: "UIViewController", Language: "swift"
  > Next > Create
- 생성된 ViewController를 Storyboard view에 연결
  Storyboard에서 view를 선택 > Identity inspector > Custom class > class를 새롭게 연결할 ViewController로 변경


# Audio in iOS(stack)
- Pitch Perfect app
- AV Foundation (AVAudioEngine)
- Core Audio
- Audio Hardware


# ViewController 이름 바꾸기
- 파일명을 바꾼다.
- 코드에 있는 Class명을 바꾼다.(주석도 포함)
- Storyboard > 기존에 연결되어 있던 화면 선택 > (오른쪽 툴)Identity Inspector > Custom class 에서 이름 변경


# AVAudioRecorderDelegate = java의 observer패턴과 유사함
- AVAudioRecorder.delegate = self 를 해주고
  AVAudioRecorderDelegate가 제공하는 함수를 구현하여 구독
- 필요없는것은 구현을 하지않아도 되는것이 다른듯...

# Swift(keyword)
- extension: 함수나 변수를 추가할 수 있다.
- enum: java와 유사하다.
- 주석으로 "// MARK: ~~~" 하면 Section heading을 만들어서 쉽게 찾아 점프할 수 있다.
- "if pitch != nil" 을 "if let pitch = pitch"로 바꿀 수 있다.




